一般模式

编辑模式：
"i"
"o"
"a"
命令行模式
":"----- 
	"w":保存 "q":退出  "set nu":显示行号  "dd":删除光标所在的一行 "u":撤销操作
	yy 复制当前行  yny 复制当前行开始 往下数n行  p  在当前行粘贴  dw 删除一个词  
	yw 复制一个词
	$ 移动到行尾
	^ 移动到行的首部
	G 到达最后一行
	1G 到第一行
	60G 到达第60行
	dG删除当前行到最后一行
	dnG删除当前行开始往下数n行
:%s/old/new/g 全部替换old替换为new

e! 重新读入文件

"?"----- 反查找 n查找上一个 N查找下一个  
"/"----- 正查找 n查找下一个 N查找上一个  




~:用户家目录  cd ~
-:上次所在的目录 cd -


d  目录
c  字符流
s   socket
p   管道文件
l   连接文件
b   设备文件

目录操作
	mkdir  rmdir
文件的查看 
	ls

别名:alias ll='ls -l'

命令目录、别名查看：which ll
使用原始命令：/bin/ls
	
复制 删除 移动  创建或修改
	cp mv rm touch
修改文件更新时间:touch -d/-t 1999/08/5s 
查阅
	cat tac(倒置) more(可分页查看,空格下翻页) less(上下箭头可用) head(从头查看多少行 head -3) tail(从尾部查看 -f:监测(日志)文件改变)	


文件与目录权限的意义与用法
作用到文件上：
	r:可以读
	w:可以修改  但不代表能删除该文件
	x:可以被系统运行(类似于.exe,.bat等格式的能被windows执行,包含x的权限才能被linux执行)
作用到目录上
	r:可以ls查看目录内的文件
	w:可以目录内创建、删除文件   重命名目录
	x:可以进入(cd)目录
	
     rwx                  r-x                 r-x
所属用户的权限       所属用户组的权限       其他权限(非所属用户、所属用户组)



文件属性操作的命令
	chown(可以替代chgrp):
		将1.txt文件的所属用户改为user：chown user 1.txt
		chown，命令修改文件所属组：chown .root 1.txt
		将文件拥有者和所属组一起修改：chown root:root 1.txt或chown root.root 1.txt
	chgrp：
		修改文件所属组：chgrp bbb 1.tx6t 
		递归修改目录的所属组：chgrp -R bbb TT 
	chmod：
		a:all   u:用户   g:组     o:orther
		将file1文件加上x执行权限chmod x file1(等价于chmod a+x file1)
		将file1文件所有者加上x执行权限chmod u+x file1(g、o类似)
		将file1文件所有者去除x执行权限chmod u-x file1(g、o类似)
		复合操作:chmod O+wx-r-wx,u+wx,g-x file1
		赋值操作:chmod o=rwx file1
		chmod 523 file1
	创建一个文件的默认权限:644(666 - umask值) umask默认值为022
	创建一个目录的默认权限:755(777 - umask值)
	修改umask(不建议):umask 222
	
	
	文件的特殊权限：
		Suid：
			限制:只能设置二进制可执行程序(目录和其他文件不行)
			功能:无论谁执行这个程序，linux都以程序的拥有者身份进入权限获取流程(passwd)
			chmod u +/- s 
			chmod 4777 + 二进制文件名
		Sgid:
			限制:可以作用在目录和二进制可执行程序
			功能:
				作用在二进制:与Suid相似,无论谁执行这个程序，linux都以程序的拥有者身份进入权限获取流程(passwd)
				作用在目录:默认情况下，用户建立文件，文件所属的组是主组
							如果在sgid目录下创建文件，则文件的所属组是继承目录的属组，新建立的目录业继承g+s的权限
			chmod g +/- s 
			chmod 2777 + 二进制文件名/目录
		sticky：
			限制:只能作用在目录上
			作用：任何人都可以在目录下建立文件，只有root和建立者本人可以删除文件
			chmod o+/-t 目录
			chmod 1777 +目录
	
	ACL(Access Control List:访问权限控制)权限设置:
		setfacl:设置某一些用户的特殊权限
				setfacl -m(设置权限) u:m1:rw testacl(文件名) 
				setfacl -b testacl 删除文件全部facl权限
				setfacl -m g:manager:rx tech/ hr/ 
		getfacl:获取某一些用户的特殊权限
				getfacl testacl(文件名) 
					# file: testacl
					# owner: root
					# group: root
					(拥有者权限)user::rw-
					(m1用户权限)user:m1:rw-
					(拥有者所属组权限)group::r--
					(文件的有效权限)mask::rw-
					(其他人权限)other::r--
		
		
		
		
磁盘分区与格式化：
	分区命令:fdisk + 分区目录
	查看当前分区信息 fdisk -l
		磁盘分区：fdisk /dev/sda
			写入后必须执行partprobe（刷新分区表）命令
	
	
	磁盘格式化：
		mkfs -t命令：mkfs -t ext3 /dev/sda5或mkfs.ext3 /dev/sda5
		
	磁盘挂载:mount /dev/sda5 /root/sda5/
	
	查看文件大小:df -a/-h
	
	磁盘卸载:umount /root/sda5
	
	开机自动挂载:vim /etc/fstab
	
	
内存交换空间的问题
SWAP

1. 安装linux的时候   忘记配置swap
2. swap不足    无法正常操作   1G

设置swap分区：
	方式一：
		步骤：
		1.使用fdisk开辟一个swap分区fdisk /dev/sda
		2.t 4 82(swap分区的id)
		3.partprobe（刷新分区表）
		4.swapon /dev/sda5
	方式二：
		步骤：
		1.创建一个100M左右的文件
			dd if=/dev/zero(0发射器) of=swap1(要产生文件的位置) bs=10(每次10M) count=10(10次)   
	
		2.将这个文件格式化成swap格式的文件
			mkswap swap1
		3.swapon swap1
		
磁盘配额(quota)：限制用户或者用户组 对硬盘的使用率 
	空间大小的配额
	文件数量的配额
	使用限制：
	只能针对于整个文件系统
	只针对分区 不针对目录
	内核 或 文件系统必须支持 quota   EXT3
	针对一般用户有效 root无效
	
	soft     hard
	  8       10
	  
	倒计时宽限时间  grace time
	如果超过了这个期限，soft限制会代替hard限制。
	
		

		
bash:bourne again shell(/bin/bash)
	history:上下箭头，保存在：ls ~/.bash_history 目录中
	Tab键：命令补齐
	设置别名：ll == ls -l
	

	
SHELL的变量
	1 变量和变量的内容用=连接文件 a=4
	2 =两边不能有空格
	3 只能以字母开头
	4 b="lang  sin"   b='langsin'
	
	获取变量值：$+变量名称
	echo：打印变量值 echo $a
	c="lang$a    sin" :echo c结果为：lang4    sin
	c='lang$a    sin' :echo c结果为：lang$a    sin
	
	如何定义一个全局变量(所有终端下)：export a或者放到.bashrc中
	
	查看系统环境变量：env
	
	查看自己定义过的变量和环境变量：set
	删除变量:uset a
	
	PS1='[\u@\h \W]\$ '
	
	\d日期
	\H完整主机名
	\h完整主机名小数点之前的名字
	\t显示时间24小时格式的
	\T显示时间12小时格式的
	\u目前登录账户的名字
	\v当前bash的版本信息
	\w完整的目录名字
	\W使用basename函数取得的目录的名字
	
	
	键盘IO：read
	read a
	read -p "please input your username:" username
	
	
	
	数组：
	定义：array[0]=1 array[1]=aaa
	echo "${array[1]}"
	
	
	history -w相当于flush功能，直接写入文件
	!+历史（history）编号：动态执行制定命令
	!!:上次执行的命令
	!re:执行上次以re开头的命令
	
	
	wildcard：通配符
	* 代表0到多个
	? 代表有且只有一个
	+ 1个到多个
	[] [1,a,4,d]代表至少要有中括号中的一个
	[0-9]代表0-9
	[^]取反 [^xyz]除了x，y，z
	
	
	
	特殊符号：
	#：代表注释
	\：代表转义
	;：连续执行命令 ls;ls
	`：作为先执行的命令  cd /lib/modules/`uname -r`/kernel
	!：非
	()：
	{}：
	> >> < <<：数据流重定向
	
	
	
	数据流重定向：
	>：覆盖重定向
	ls > 1.txt,echo 1 >1.txt
	!&:前边一个命令的最后一组输入
	>>:追加模式重定向 echo 1 >>1.txt
	
	标准输入：stdin       0(代码号)
	标准输出：stdout      1(代码号) 
	标准错误输出：stderr  2(代码号)
	
	1>,1>> 标准输出
	2>,2>> 标准错误输出
	find：find .(当前目录) -name 1.txt 
		  find /data -name 1.txt
	分类输出：find /home/ -name .bash_profile 1>1.txt 2>2.txr
	不分类：find /home/ -name .bash_profile >log 2>&1或者find /home/ -name .bash_profile &>log
	find /home/ -name .bash_profile 1>1.txt 2>/dev/null(丢弃)
	
	
	输入：<  <<
	cat >2<<end
	cat >1.txt </etc/passwd
	
	
	查看命令回传码：echo $?
	
	命令的连续执行：
	;  ：ls -x;ls 第一个执行失败第二个照样执行
	&& ：c1&&c2 c1命令回传码 =0则c2执行，否则不执行
	|| ：如果说c1命令回传码=0则第二个不执行，只有当第一个回传码不是0，c2才执行
	
	
	管道：pipe
	c1|c2：管道前的命令的输出作为输入参数
	
	find：查找命令
		-name 指定文件名
		-size 指定大小
		-type 指定类型    f文件（find -type f）    d目录（find -type d）
		-o 或
		-a 与
		-not 非
		-user 指定用户
		-group 指定用户组
		-perm 根据权限位来搜索
		例子：1.查询文件大小=5M的（find . -type f -size 5M）
				            >（find . -type f -size +5M）
							<（find . -type f -size -5M）
			  2.大于2M且小于6M的 find . -type f -size +2M -a -6M
			  3.大于2M或者小于6M的 find . -type f -size +2M -o -6M -user root -perm 644
			  
			  
	cut:类似于java中的StringTokenizer
	
		cut -d(分隔符) -f(第几个，从1开始) 1 文件
			 cut -d : -f 1 /etc/passwd
			 cut -d : -f 1,3 /etc/passwd
			 
		echo $PATH | cut -d: -f 3
		
	sort：排序命令
			cat /etc/passwd | sort
			cat /etc/passwd | sort -t(分隔符) ':' -k(分隔符后第几个) 5
	
	wc：统计行数、字数、多少个字符
		cat /etc/passwd | wc  
		输出结果如下：44(行数) 66(字数) 1878(字符数)
	
	uniq：消除重复行
		cat 1.txt | uniq
		
	
	xargs：管道前的命令的输出结果作为管道后的命令输入参数，是一个循环的过程
		
		
	练习1：为当前linux的所有主机用户创建目录，目录的名字要和用户的名字一直
		cut -d : -f 1 | xargs mkdir 
	练习2：查找当前目录下大于5M，小于10M的文件，将其拷贝到指定目录
		find . -type f -size +5M -a -size -10M | xargs -i cp {} /root/xargs
		如果xargs后面不接任何参数 默认代表echo输出
		
	批量添加用户避免两次输入密码：echo 123 | passwd --stdin abc
	
	
	grep:筛选内容
		查找demo.txt中包含good的一行：grep good demo.txt
		-i 忽略大小写
		-n 输出行号
		-v 反向选择（grep good demo.txt -v：不包含good的一行）
		-r 在文件夹下搜索（grep -r 'root' /etc:搜索的是/etc这个文件夹下的文件中包含root的文件）
		
		
		
		
	正则表达式：
		基础正则：1.'.':代表一个字符  2.'*' 3. '^' ：以...开头4. '$'：以...结尾 5. '[]' 6. '\'：转义
		
		扩展正则：1.{n}只能出现n次 2.{n,m}出现n到m之间次 3.{n,}n次到多次 4.{}只能出现的范围 5.+:一个或者一个以上 6.?：0个或者1个
				  7.|:或者 8.()：一种组，egrep 'v(aa|oo)v' demo.txt
		要想使用扩展正则，三个方案：
			1. 用转义字符\
			2. 使用-E参数
			3. 使用egrep
	
	sed 与 awk：
		sed[option] 'cmd' [file]
